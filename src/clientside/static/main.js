/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Color.js":
/*!**********************!*\
  !*** ./src/Color.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nconst { clamp } = __webpack_require__(/*! ./GameMath */ \"./src/GameMath.js\");\r\n\r\nclass Color\r\n{\r\n    constructor(r, g, b, a = 255)\r\n    {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n    }\r\n\r\n    toHex()\r\n    {\r\n        this.r = Math.floor(this.r);\r\n        this.g = Math.floor(this.g);\r\n        this.b = Math.floor(this.b);\r\n        this.a = Math.floor(this.a);\r\n        const r = (\"0\" + this.r.toString(16)).substr(-2,2);\r\n        const g = (\"0\" + this.g.toString(16)).substr(-2,2);\r\n        const b = (\"0\" + this.b.toString(16)).substr(-2,2);\r\n        const a = (\"0\" + this.a.toString(16)).substr(-2,2);\r\n        return \"#\" + r + g + b + a;\r\n    }\r\n\r\n    toHexNoAlpha()\r\n    {\r\n        this.r = Math.floor(this.r);\r\n        this.g = Math.floor(this.g);\r\n        this.b = Math.floor(this.b);\r\n        const r = (\"0\" + this.r.toString(16)).substr(-2,2);\r\n        const g = (\"0\" + this.g.toString(16)).substr(-2,2);\r\n        const b = (\"0\" + this.b.toString(16)).substr(-2,2);\r\n        return \"#\" + r + g + b;\r\n    }\r\n\r\n    copy()\r\n    {\r\n        return new Color(this.r, this.g, this.b, this.a);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {number} h Hue from 0 to 360\r\n     * @param {number} s Saturation from 0 to 1\r\n     * @param {number} v Value form 0 to 1\r\n     */\r\n    static FromHSV(h, s, v)\r\n    {\r\n        //https://www.rapidtables.com/convert/color/hsv-to-rgb.html\r\n        h = clamp(Math.floor(h), 0, 359);\r\n        s = clamp(s, 0, 1);\r\n        v = clamp(v, 0, 1);\r\n\r\n        let c = v * s;\r\n        let x = c * (1 - Math.abs((h / 60) % 2 - 1)); //????\r\n        let m = v - c;\r\n\r\n        let col;\r\n        if (h < 60) col = [c, x, 0];\r\n        else if (h < 120) col = [x, c, 0];\r\n        else if (h < 180) col = [0, c, x];\r\n        else if (h < 240) col = [0, x, c];\r\n        else if (h < 300) col = [x, 0, c];\r\n        else if (h < 360) col = [c, 0, x];\r\n        else return;\r\n\r\n        return new Color(\r\n            Math.floor((col[0] + m) * 255),\r\n            Math.floor((col[1] + m) * 255),\r\n            Math.floor((col[2] + m) * 255)\r\n        );\r\n    }\r\n}\r\n\r\nmodule.exports = Color;\r\n\n\n//# sourceURL=webpack://soundwaves/./src/Color.js?");

/***/ }),

/***/ "./src/GameMath.js":
/*!*************************!*\
  !*** ./src/GameMath.js ***!
  \*************************/
/***/ ((module) => {

eval("\r\nfunction lerp(a, b, t, clamp01 = false)\r\n{\r\n    if (clamp01)\r\n    {\r\n        t = clamp(t);\r\n    }\r\n    return (1 - t) * a + t * b;\r\n}\r\n\r\nfunction inverseLerp(a, b, x)\r\n{\r\n    return (x - a) / (b - a);\r\n}\r\n\r\nfunction lerpVector(a, b, t)\r\n{\r\n    return {\r\n        x: lerp(a.x, b.x, t),\r\n        y: lerp(a.y, b.y, t)\r\n    };\r\n}\r\n\r\nfunction hexToRgb(hex)\r\n{\r\n    var result = /^#?([A-Fa-f\\d]{2})([A-Fa-f\\d]{2})([A-Fa-f\\d]{2})$/i.exec(hex);\r\n    return result ? {\r\n    r: parseInt(result[1], 16),\r\n    g: parseInt(result[2], 16),\r\n    b: parseInt(result[3], 16)\r\n    } : null;\r\n}\r\n\r\nfunction rgbToHex(c)\r\n{\r\n    const r = (\"0\" + c.r.toString(16)).substr(-2,2);\r\n    const g = (\"0\" + c.g.toString(16)).substr(-2,2);\r\n    const b = (\"0\" + c.b.toString(16)).substr(-2,2);\r\n\r\n    return \"#\" + r + g + b;\r\n}\r\n\r\nfunction lerpColorHex(a, b, t)\r\n{\r\n    let c = lerpColor(hexToRgb(a), hexToRgb(b), t);\r\n    return rgbToHex(c);\r\n}\r\n\r\nfunction lerpColor(a, b, t)\r\n{\r\n    if (a && b)\r\n    {\r\n        return {\r\n            r: Math.round(lerp(a.r, b.r, t)),\r\n            g: Math.round(lerp(a.g, b.g, t)),\r\n            b: Math.round(lerp(a.b, b.b, t))\r\n        };\r\n    } else {\r\n        return { r: 255, g: 0, b: 255 };\r\n    }\r\n}\r\n\r\nfunction clamp(t, lower = 0, upper = 1)\r\n{\r\n    return Math.min(upper, Math.max(lower, t));\r\n}\r\n\r\nmodule.exports = \r\n{\r\n    lerp,\r\n    inverseLerp,\r\n    lerpVector,\r\n    hexToRgb,\r\n    rgbToHex,\r\n    lerpColorHex,\r\n    lerpColor,\r\n    clamp,\r\n};\n\n//# sourceURL=webpack://soundwaves/./src/GameMath.js?");

/***/ }),

/***/ "./src/GameSettings.js":
/*!*****************************!*\
  !*** ./src/GameSettings.js ***!
  \*****************************/
/***/ ((module) => {

eval("\r\nclass Setting\r\n{\r\n    constructor(name, value)\r\n    {\r\n        this.name = name;\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nconst settingsList = \r\n[\r\n    // propertyname,        default,    display\r\n    [ 'mapSize',            3,      new Setting('Map Size') ],\r\n    [ 'playerSize',         0.04,   new Setting('Player Size') ],\r\n    [ 'playerSpeed',        0.4,    new Setting('Player Speed') ],\r\n    [ 'playerStepDistance', 0.24,   new Setting('Player Step Distance') ],\r\n    [ 'sneakFactor',        0.5,    new Setting('Player Sneak Factor') ],\r\n    [ 'chargeSpeed',        3,      new Setting('Player Charge Speed') ],\r\n    [ 'dischargeSpeed',     0.06,      new Setting('Player Discharge Speed') ],\r\n    \r\n    // static settings\r\n    [ 'walkSmoothness',     5 ],\r\n    [ 'spawnCooldown',      0.5 ],\r\n    [ 'hitCooldown',        0.3 ],\r\n    [ 'colDetectionRange',  0.5 ],\r\n    [ 'clientCorrection',   10 ],\r\n];\r\n\r\nclass GameSettings\r\n{\r\n\r\n    constructor()\r\n    {\r\n        for (let [ key, defaultVal ] of settingsList)\r\n        {\r\n            this[key] = defaultVal;\r\n        }\r\n    }\r\n\r\n    toArray()\r\n    {\r\n        let arr = [];\r\n        for (let [ key ] of settingsList)\r\n        {\r\n            arr.push(this[key]);\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    static FromArray(arr)\r\n    {\r\n        let settings = new GameSettings();\r\n\r\n        for (let [ key, defaultval ] of settingsList)\r\n        {\r\n            settings[key] = arr.shift() || defaultval;\r\n        }\r\n\r\n        return settings;\r\n    }\r\n}\r\n\r\nmodule.exports = { GameSettings, settingsList };\r\n\n\n//# sourceURL=webpack://soundwaves/./src/GameSettings.js?");

/***/ }),

/***/ "./src/Glow.js":
/*!*********************!*\
  !*** ./src/Glow.js ***!
  \*********************/
/***/ ((module) => {

eval("\r\nclass Glow\r\n{\r\n    constructor(glowRiseTime = 0.3, glowDecayTime = 1.5, brightness = 0)\r\n    {\r\n        this.brightness = brightness;\r\n        this.glowDecayTime = glowDecayTime;\r\n        this.glowRiseTime = glowRiseTime;\r\n        this.remainingGlowEnergy = 0;\r\n    }\r\n\r\n    /**\r\n     * let's the carrier of the glow light up for a short moment.\r\n     */\r\n    agitate(energy = 1)\r\n    {\r\n        this.remainingGlowEnergy = Math.min(this.remainingGlowEnergy + energy, 1);\r\n    }\r\n\r\n    getBrightness()\r\n    {\r\n        return this.brightness;\r\n    }\r\n\r\n    update(dt)\r\n    {\r\n        if (this.remainingGlowEnergy > 0)\r\n        {\r\n            if (this.glowRiseTime > 0)\r\n            {\r\n                let addedGlow = dt / this.glowRiseTime;\r\n                this.brightness = Math.min(this.brightness + addedGlow, 1);\r\n                this.remainingGlowEnergy -= addedGlow;\r\n                this.remainingGlowEnergy = Math.max(0, this.remainingGlowEnergy);\r\n            }\r\n            else\r\n            {\r\n                // instantaniously add all energy\r\n                this.brightness = Math.min(this.brightness + this.remainingGlowEnergy, 1);\r\n                this.remainingGlowEnergy = 0;\r\n            }\r\n        }\r\n\r\n        this.brightness = Math.max(0, this.brightness - dt / this.glowDecayTime);\r\n    }\r\n}\r\n\r\nmodule.exports = Glow;\n\n//# sourceURL=webpack://soundwaves/./src/Glow.js?");

/***/ }),

/***/ "./src/Rect.js":
/*!*********************!*\
  !*** ./src/Rect.js ***!
  \*********************/
/***/ ((module) => {

eval("\r\nclass Rect\r\n{\r\n    constructor(x, y, w, h)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.w = w;\r\n        this.h = h;\r\n    }\r\n\r\n    getRange()\r\n    { return this; }\r\n\r\n    getLeft()\r\n    { return this.x; }\r\n\r\n    getRight()\r\n    { return this.x + this.w; }\r\n\r\n    getTop()\r\n    { return this.y; }\r\n\r\n    getBottom()\r\n    { return this.y + this.h; }\r\n\r\n    getOldLeft()\r\n    { return this.oldX; }\r\n\r\n    getOldRight()\r\n    { return this.oldX + this.w; }\r\n\r\n    getOldTop()\r\n    { return this.oldY; }\r\n\r\n    getOldBottom()\r\n    { return this.oldY + this.h; }\r\n\r\n    getCenterX()\r\n    { return this.x + 0.5 * this.w; }\r\n\r\n    getCenterY()\r\n    { return this.y + 0.5 * this.h; }\r\n\r\n    setLeft(x) \r\n    { this.x = x; }\r\n\r\n    setRight(x) \r\n    { this.x = x - this.w; }\r\n\r\n    setTop(y) \r\n    { this.y = y; }\r\n\r\n    setBottom(y) \r\n    { this.y = y - this.h; }\r\n\r\n    // drawOutline(ctx, camera) \r\n    // {\r\n    //     var margin = 2;\r\n    //     ctx.strokeStyle = \"#ffef42\";\r\n    //     ctx.lineWidth = 4;\r\n    //     ctx.strokeRect(this.x - camera.x - margin,\r\n    //         this.y - camera.y - margin,\r\n    //         this.w + 2 * margin, this.h + 2 * margin);\r\n    // }\r\n\r\n    copy()\r\n    {\r\n        return new Rect(this.x, this.y, this.w, this.h);\r\n    }\r\n\r\n    extend(m)\r\n    {\r\n        return new Rect(this.x - m, this.y - m, this.w + 2 * m, this.h + 2 * m);\r\n    }\r\n\r\n    roundUp()\r\n    {\r\n        let newX = Math.floor(this.x);\r\n        let newY = Math.floor(this.y);\r\n        return new Rect(\r\n            newX, newY,\r\n            Math.ceil(this.w + this.x - newX),\r\n            Math.ceil(this.h + this.y - newY),\r\n        );\r\n    }\r\n\r\n    containsRect(rect)\r\n    {\r\n        if (this.x > rect.x) return false;\r\n        if (this.y > rect.y) return false;\r\n        if (this.getRight() < (rect.x + rect.w)) return false;\r\n        if (this.getBottom() < (rect.y + rect.h)) return false;\r\n        return true;\r\n    }\r\n\r\n    static intersectPoint(rect, point, margin = 0)\r\n    {\r\n        return - margin + rect.getLeft() < point.x && margin + rect.getRight() > point.x\r\n            && - margin + rect.getTop() < point.y && margin + rect.getBottom() > point.y;\r\n    }\r\n\r\n    // https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-box-intersection\r\n    static intersectLine(rect, A, B)\r\n    {\r\n        let tmin = (rect.getLeft() - A.x) / (B.x - A.x); \r\n        let tmax = (rect.getRight() - A.x) / (B.x - A.x); \r\n\r\n        if (tmin > tmax)\r\n            tmin = [tmax, tmax = tmin][0]; // 1 line swap of doom\r\n\r\n        let tymin = (rect.getTop() - A.y) / (B.y - A.y); \r\n        let tymax = (rect.getBottom() - A.y) / (B.y - A.y); \r\n\r\n        if (tymin > tymax) \r\n            tymin = [tymax, tymax = tymin][0];\r\n\r\n        if ((tmin > tymax) || (tymin > tmax)) \r\n            return false; \r\n\r\n        if (tymin > tmin) \r\n            tmin = tymin; \r\n\r\n        if (tymax < tmax) \r\n            tmax = tymax; \r\n\r\n        if (tmin > 1 || tmax < 0)\r\n            return false; // not between A and B\r\n\r\n        return true;\r\n    }\r\n\r\n    static intersectRect(fixed, movable, margin = 0)\r\n    {\r\n        return  - margin + fixed.getLeft()    <= movable.getRight() && \r\n                + margin + fixed.getRight()   >= movable.getLeft() && \r\n                - margin + fixed.getTop()     <= movable.getBottom() && \r\n                + margin + fixed.getBottom()  >= movable.getTop();\r\n    }\r\n\r\n    static collide(fixed, movable, iterations = 1, offsetMargin = 0.001)\r\n    {\r\n        // fix collision of 'movable' in relation to 'fixed'\r\n\r\n        for (let i = 0; i < iterations; i++)\r\n        {\r\n            // interpolate movement of 'movable' between its position from last frame and now \r\n            const t = (i + 1) / iterations;\r\n            let interpolated = new Rect(\r\n                movable.oldX + (movable.x - movable.oldX) * t,\r\n                movable.oldY + (movable.y - movable.oldY) * t,\r\n                movable.w, movable.h);\r\n\r\n            const collision = Rect.intersectRect(fixed, interpolated); \r\n            if (collision)\r\n            {\r\n                // COLLISION IN X DIRECTION\r\n                if (interpolated.getRight() >= fixed.getLeft() &&\r\n                    movable.getOldRight() < fixed.getLeft())\r\n                {\r\n                    // movable has fixed to its right\r\n                    movable.setRight(fixed.getLeft() - offsetMargin);\r\n                    movable.oldX = movable.x;\r\n                }\r\n                else if (interpolated.getLeft() <= fixed.getRight() &&\r\n                    movable.getOldLeft() > fixed.getRight())\r\n                {\r\n                    // movable has fixed to its left\r\n                    movable.setLeft(fixed.getRight() + offsetMargin);\r\n                    movable.oldX = movable.x;\r\n                }\r\n                \r\n                // COLLISION IN Y DIRECTION\r\n                if (interpolated.getBottom() >= fixed.getTop() &&\r\n                    movable.getOldBottom() < fixed.getTop())\r\n                {\r\n                    // movable has fixed to its bottom\r\n                    movable.setBottom(fixed.getTop() - offsetMargin);\r\n                    movable.oldY = movable.y;\r\n                }\r\n                else if (interpolated.getTop() <= fixed.getBottom() &&\r\n                    movable.getOldTop() > fixed.getBottom())\r\n                {\r\n                    // movable has fixed to its top\r\n                    movable.setTop(fixed.getBottom() + offsetMargin);\r\n                    movable.oldY = movable.y;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nmodule.exports = Rect;\n\n//# sourceURL=webpack://soundwaves/./src/Rect.js?");

/***/ }),

/***/ "./src/Soundwave.js":
/*!**************************!*\
  !*** ./src/Soundwave.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Rect = __webpack_require__(/*! ./Rect */ \"./src/Rect.js\");\r\n\r\nclass Soundwave // version 4 or something???!\r\n{\r\n    constructor(game, x, y, sender, settings, color, isClientSoundwave = false)\r\n    {\r\n        this.game = game;\r\n        this.sender = sender;\r\n        this.color = color;\r\n        this.settings = settings;\r\n        this.isClientSoundwave = isClientSoundwave;\r\n        this.resolution = this.isClientSoundwave ? this.settings.resolutionClient : this.settings.resolutionServer;\r\n        \r\n        this.dead = false;\r\n        this.age = 0;\r\n        this.r = 0;\r\n        this.center = { x, y };\r\n        this.vertices = [];\r\n        \r\n        if (this.settings.full)\r\n        {\r\n            this.bounds = \r\n            {\r\n                left: -1,\r\n                top: -1,\r\n                right: 1,\r\n                bottom: 1,\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.bounds = \r\n            {\r\n                left: -0,\r\n                top: -0,\r\n                right: 0,\r\n                bottom: 0,\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.resolution; i++)\r\n        {\r\n            const angle = (i / this.resolution - 0.5) * this.settings.spread + this.settings.rotation;\r\n            this.vertices[i] = \r\n            {\r\n                dir: // normalized dir for raycasting only needs to be calculated once\r\n                {\r\n                    x: Math.cos(angle),\r\n                    y: Math.sin(angle)\r\n                },\r\n                active: true, // if ray has hit it doesn't have to be calculated again\r\n                oldActive: true, // for col. detection\r\n                x, y, // vertex' last position stored here to be sent to client\r\n                oldX: this.center.x, oldY: this.center.y, // for collision with player\r\n            }\r\n        }\r\n        if (!this.settings.full)\r\n        {\r\n            // calculate boundsw\r\n            for (let v of this.vertices)\r\n            {\r\n                const dir = v.dir;\r\n                this.bounds.left = Math.min(this.bounds.left, dir.x);\r\n                this.bounds.right = Math.max(this.bounds.right, dir.x);\r\n                this.bounds.top = Math.min(this.bounds.top, dir.y);\r\n                this.bounds.bottom = Math.max(this.bounds.bottom, dir.y);\r\n            }\r\n            \r\n            // adds another vertex in the center to make soundwave pie-shaped\r\n            this.vertices.push({\r\n                x: this.center.x, \r\n                y: this.center.y, \r\n                active: false,\r\n                oldActive: false, // for col. detection\r\n                center: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    getBounds()\r\n    {\r\n        let left =   this.center.x + this.r * this.bounds.left;\r\n        let right =  this.center.x + this.r * this.bounds.right;\r\n        let top =    this.center.y + this.r * this.bounds.top;\r\n        let bottom = this.center.y + this.r * this.bounds.bottom;\r\n\r\n        return new Rect(left, top, right - left, bottom - top);\r\n    }\r\n\r\n    update(deltaTime, map)\r\n    {\r\n        this.age += deltaTime;\r\n        this.r = this.age * this.settings.speed;\r\n\r\n        // LINEAR (because 2d no inverse square law!)\r\n        this.power = 1 - this.age / this.settings.lifetime;\r\n        \r\n        if (this.age / this.settings.lifetime > 1)\r\n        {\r\n            this.dead = true;\r\n        }\r\n        \r\n        this.color.a = Math.max(0, 255 * this.power * this.power);\r\n\r\n        for (const vertex of this.vertices)\r\n        {\r\n            vertex.oldX = vertex.x;\r\n            vertex.oldY = vertex.y;\r\n\r\n            if (!vertex.active)\r\n            {\r\n                vertex.oldActive = false;\r\n                continue; // ...to next vertex\r\n            }\r\n\r\n            //////////////// RAYCAST ALGORITHM (MADE BY MYSELF) //////////////// \r\n            \r\n            const d = vertex.dir; // direction of ray\r\n            const o = this.center; // origin of ray\r\n            \r\n            let m = d.x > 0 ? Math.ceil(o.x) : Math.floor(o.x); // next vertical gridline m (either on left or right of o depending on d)\r\n            let n = d.y > 0 ? Math.ceil(o.y) : Math.floor(o.y); // same for horizontal\r\n            \r\n            while (true)\r\n            {\r\n                let tx, ty; // distances to gridlines\r\n\r\n                // prevent div by 0 if ray is parallel to grid\r\n                tx = ty = Number.POSITIVE_INFINITY;\r\n                if (d.x != 0) \r\n                {\r\n                    tx = (m-o.x) / d.x; // calc distance\r\n                }\r\n                if (d.y != 0)\r\n                {\r\n                    ty = (n-o.y) / d.y;\r\n                }\r\n\r\n                // get shortest distance to gridlines\r\n                let t = Math.min(tx, ty);\r\n\r\n                // raycast has hit soundwave radius\r\n                if (t > this.r)\r\n                {\r\n                    // vertex is still on soundwave radius\r\n                    vertex.x = o.x + this.r * d.x;\r\n                    vertex.y = o.y + this.r * d.y;\r\n                    break;\r\n                }\r\n\r\n                // calc gridpoint\r\n                let p = {\r\n                    x: o.x + t * d.x,\r\n                    y: o.y + t * d.y,\r\n                };\r\n                vertex.x = p.x;\r\n                vertex.y = p.y;\r\n\r\n                // hit with map pixel\r\n                let hit = false;\r\n                // indices of map grid\r\n                let i, j;\r\n\r\n                if (tx < ty) // determine which axis is hit by raycast, here x\r\n                {\r\n                    // calc grid indices of hit\r\n                    i = Math.round(p.x); // for slight inaccuracies (float errors etc)\r\n                    j = Math.floor(p.y);\r\n                    \r\n                    // move gridlines one step further\r\n                    if (d.x > 0)\r\n                    {\r\n                        m++;\r\n                    }\r\n                    else\r\n                    {\r\n                        i--;\r\n                        m--;\r\n                    }\r\n                }\r\n                else // same for y\r\n                {\r\n                    i = Math.floor(p.x);\r\n                    j = Math.round(p.y);\r\n\r\n                    if (d.y > 0)\r\n                    {\r\n                        n++;\r\n\r\n                    }\r\n                    else\r\n                    {\r\n                        n--;\r\n                        j--;\r\n                    }\r\n                }\r\n\r\n                if (i < 0 || i >= map.width || j < 0 || j >= map.height) // outside map\r\n                    hit = true; \r\n                else\r\n                    hit = map.pixels[j][i] == '1'; // otherwise, hit is determined by map grid\r\n\r\n                if (hit)\r\n                {\r\n                    vertex.active = false; // vertex doesn't have to be calculated again if hit\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return [];\r\n    }\r\n    \r\n    onDeath()\r\n    {\r\n        \r\n    }\r\n\r\n    getType()\r\n    {\r\n        return 'w';\r\n    }\r\n\r\n    getDataNew()\r\n    {\r\n        return {\r\n            co: this.color,\r\n            ce: this.center,\r\n            ag: this.age,\r\n            se: this.settings.getData()\r\n        }\r\n    }\r\n\r\n    getDataUpdate()\r\n    {\r\n        return {};\r\n    }\r\n}\r\n\r\nmodule.exports = Soundwave;\n\n//# sourceURL=webpack://soundwaves/./src/Soundwave.js?");

/***/ }),

/***/ "./src/SoundwaveSettings.js":
/*!**********************************!*\
  !*** ./src/SoundwaveSettings.js ***!
  \**********************************/
/***/ ((module) => {

eval("\r\nclass SoundwaveSettings\r\n{\r\n    constructor(speed, lifetime, damage, rotation, spread, resolutionServer, resolutionClient)\r\n    {\r\n        this.speed = speed;\r\n        this.lifetime = lifetime;\r\n        this.damage = damage;\r\n        this.rotation = rotation;\r\n        this.spread = spread;\r\n        this.resolutionServer = resolutionServer;\r\n        this.resolutionClient = resolutionClient;\r\n        this.full = this.spread > 6.2; // approx. 2*pi\r\n    }\r\n    \r\n    getData()\r\n    {\r\n        return [\r\n            this.speed, \r\n            this.lifetime, \r\n            this.damage, \r\n            this.rotation, \r\n            this.spread, \r\n            this.resolutionServer,\r\n            this.resolutionClient\r\n        ];\r\n    }\r\n\r\n    static walk()\r\n    {\r\n        return new SoundwaveSettings(0.6, 2, 0, 0, 2 * Math.PI, 0, 100);\r\n    }\r\n\r\n    static sneak()\r\n    {\r\n        return new SoundwaveSettings(0.6, 0.5, 0, 0, 2 * Math.PI, 0, 50);\r\n    }\r\n\r\n    static hurt()\r\n    {\r\n        return new SoundwaveSettings(0.3, 0.8, 0, 0, 2 * Math.PI, 0, 60);\r\n    }\r\n\r\n    static death()\r\n    {\r\n        return new SoundwaveSettings(0.1, 3, 0, 0, 2 * Math.PI, 0, 50);\r\n    }\r\n\r\n    static Attack(rotation, power)\r\n    {\r\n        // logarithm limits speed if magnitude is very large\r\n        let speed = Math.log1p(15 * power) * 0.5;\r\n        // seems reasonable\r\n        let lifetime = 2;\r\n        // damage rises exponentially to eliminate spamming\r\n        let damage = 0.3 * Math.expm1(power);\r\n        // spread similar to 1/x but offset so f(0)=PI\r\n        let spread = 3.1415 / (30 * power + 0.1);\r\n\r\n        return new SoundwaveSettings(speed, lifetime, damage, rotation, spread, 30, 50);\r\n    }\r\n}\r\n\r\nmodule.exports = SoundwaveSettings;\r\n\n\n//# sourceURL=webpack://soundwaves/./src/SoundwaveSettings.js?");

/***/ }),

/***/ "./src/Vector.js":
/*!***********************!*\
  !*** ./src/Vector.js ***!
  \***********************/
/***/ ((module) => {

eval("\r\n\r\nclass Vec2\r\n{\r\n    constructor(x = 0, y = 0)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    copy()\r\n    {\r\n        return new Vec2(this.x, this.y)\r\n    }\r\n\r\n    add(v)\r\n    {\r\n        return new Vec2(\r\n            this.x + v.x,\r\n            this.y + v.y\r\n        )\r\n    }\r\n\r\n    sub(v)\r\n    {\r\n        return new Vec2(\r\n            this.x - v.x,\r\n            this.y - v.y\r\n        )\r\n    }\r\n\r\n    mult(v)\r\n    {\r\n        if (typeof(v) == 'number')\r\n        {\r\n            return new Vec2(\r\n                this.x * v,\r\n                this.y * v\r\n            )\r\n        }\r\n        else\r\n        {\r\n            return new Vec2(\r\n                this.x * v.x,\r\n                this.y * v.y\r\n            )\r\n        }\r\n    }\r\n\r\n    dot(v)\r\n    {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n\r\n    sqrMagnitude()\r\n    {\r\n        return this.dot(this);\r\n    }\r\n\r\n    magnitude()\r\n    {\r\n        return Math.sqrt(this.sqrMagnitude());\r\n    }\r\n\r\n    normalize(length = 1)\r\n    {\r\n        let m = this.magnitude();\r\n        if (m == 0)\r\n            return new Vec2(0, 0);\r\n        else\r\n            return this.mult(length / m)\r\n    }\r\n\r\n    rotate(a)\r\n    {\r\n        const cos = Math.cos(a);\r\n        const sin = Math.sin(a);\r\n\r\n        return new Vec2(\r\n            this.x * cos - this.y * sin,\r\n            this.x * sin + this.y * cos\r\n        )\r\n    }\r\n\r\n    lerp(target, t)\r\n    {\r\n        let delta = target.sub(this);\r\n        return this.add(delta.mult(t))\r\n    }\r\n\r\n    heading()\r\n    {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n}\r\n\r\nmodule.exports = { Vec2 }\n\n//# sourceURL=webpack://soundwaves/./src/Vector.js?");

/***/ }),

/***/ "./src/clientside/Bars.js":
/*!********************************!*\
  !*** ./src/clientside/Bars.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Statusbar\": () => /* binding */ Statusbar,\n/* harmony export */   \"XPBar\": () => /* binding */ XPBar\n/* harmony export */ });\n/* harmony import */ var _GameMath__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GameMath */ \"./src/GameMath.js\");\n/* harmony import */ var _GameMath__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_GameMath__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\r\nclass Statusbar\r\n{\r\n    constructor(id, startVal = 0)\r\n    {\r\n        this.element = document.getElementById(id);\r\n        this.bar = this.element.getElementsByTagName('span')[0];\r\n        this.text = this.element.getElementsByTagName('div')[0];\r\n        this.currentValue = startVal;\r\n        this.targetValue = -1;\r\n\r\n        this.animationFactor = 10;\r\n    }\r\n\r\n    set(value)\r\n    {\r\n        this.targetValue = value;\r\n    }\r\n\r\n    update(dt)\r\n    {\r\n        const k = this.animationFactor * dt;\r\n        if (this.targetValue >= 0)\r\n        {\r\n            // set width\r\n            this.currentValue = (0,_GameMath__WEBPACK_IMPORTED_MODULE_0__.lerp)(this.currentValue, this.targetValue, k);\r\n            let val = this.currentValue % 1; // some bars loop\r\n            let width = Math.max(Math.min(val * 100, 100), 0);\r\n            this.bar.style.width = width + '%';\r\n\r\n            let compStyle = window.getComputedStyle(this.bar, null);\r\n            let barWidth = parseFloat(compStyle.getPropertyValue(\"width\"));\r\n\r\n            let newHeight = Math.max(3, Math.round(barWidth)) + \"px\";\r\n            this.bar.style.height = newHeight;\r\n        }\r\n    }\r\n}\r\n\r\nclass XPBar extends Statusbar\r\n{\r\n    constructor(id, startVal)\r\n    {\r\n        super(id, startVal);\r\n\r\n        this.animationFactor = 3;\r\n    }\r\n\r\n    update(dt)\r\n    {\r\n        super.update(dt);\r\n\r\n        let lvl = Math.floor(this.currentValue);\r\n        this.text.innerHTML = \"Level \" + lvl;\r\n    }\r\n}\n\n//# sourceURL=webpack://soundwaves/./src/clientside/Bars.js?");

/***/ }),

/***/ "./src/clientside/ClientBug.js":
/*!*************************************!*\
  !*** ./src/clientside/ClientBug.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ClientBug\": () => /* binding */ ClientBug\n/* harmony export */ });\n/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Color */ \"./src/Color.js\");\n/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Color__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ClientEntity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ClientEntity */ \"./src/clientside/ClientEntity.js\");\n\r\n\r\n\r\nclass ClientBug extends _ClientEntity__WEBPACK_IMPORTED_MODULE_1__.ClientEntity\r\n{\r\n    constructor(game, { x, y, r, br = 0, co = new (_Color__WEBPACK_IMPORTED_MODULE_0___default())(255, 255, 255, 255) })\r\n    {\r\n        super(game, { x, y, w: r*2, h: r*2, co, br });\r\n        this.radius = r;\r\n    }\r\n\r\n    update(dt, map)\r\n    {\r\n        super.update(dt, map);\r\n    }\r\n\r\n    hurt(damage, sender)\r\n    {\r\n        this.glow.agitate();\r\n    }\r\n\r\n    draw(ctx, camera)\r\n    {\r\n        this.color.a = Math.floor(255 * this.glow.brightness);\r\n\t\tctx.fillStyle = this.color.toHex();\r\n\r\n        const center = camera.WorldToCanvas({ x: this.getCenterX(), y: this.getCenterY() })\r\n\t\tconst radius = camera.WorldToCanvasScale(this.radius);\r\n        ctx.beginPath();\r\n\t\tctx.ellipse(center.x, center.y, radius, radius, 0, 0, 6.283);\r\n        ctx.fill();\r\n    }\r\n}\n\n//# sourceURL=webpack://soundwaves/./src/clientside/ClientBug.js?");

/***/ }),

/***/ "./src/clientside/ClientCamera.js":
/*!****************************************!*\
  !*** ./src/clientside/ClientCamera.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ClientCamera\": () => /* binding */ ClientCamera\n/* harmony export */ });\n/* harmony import */ var _Rect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Rect */ \"./src/Rect.js\");\n/* harmony import */ var _Rect__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Rect__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _GameMath__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../GameMath */ \"./src/GameMath.js\");\n/* harmony import */ var _GameMath__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_GameMath__WEBPACK_IMPORTED_MODULE_1__);\n\r\n \r\n\r\nclass ClientCamera \r\n{\r\n    constructor(game, x = 0, y = 0, zoom = 1) \r\n    {\r\n        this.game = game;\r\n        this.x = x; // camera offset in WORLD! coordinates\r\n        this.y = y;\r\n        this.zoom = zoom;\r\n    }\r\n\r\n    // translate world point to canvas point\r\n    WorldToCanvas(worldCoords)\r\n    {\r\n        let canCoords = \r\n        {\r\n            x: (worldCoords.x - this.x) * this.zoom,\r\n            y: (worldCoords.y - this.y) * this.zoom\r\n        };\r\n        return canCoords;\r\n    }\r\n\r\n    // reverse\r\n    CanvasToWorld(canCoords)\r\n    {\r\n        let worldCoords = \r\n        {\r\n            x: canCoords.x / this.zoom + this.x,\r\n            y: canCoords.y / this.zoom + this.y\r\n        };\r\n        return worldCoords;\r\n    }\r\n\r\n    WorldToCanvasRect(worldRect)\r\n    {\r\n        const canPos = this.WorldToCanvas({ x: worldRect.x, y: worldRect.y });\r\n        const canSize = this.WorldToCanvasVector({ x: worldRect.w, y: worldRect.h });\r\n\r\n        return new (_Rect__WEBPACK_IMPORTED_MODULE_0___default())(canPos.x, canPos.y, canSize.x, canSize.y);\r\n    }\r\n\r\n    CanvasToWorldRect(canRect)\r\n    {\r\n        const worldPos = this.CanvasToWorld({ x: canRect.x, y: canRect.y });\r\n        const worldSize = this.CanvasToWorldVector({x: canRect.w, y: canRect.h });\r\n\r\n        return new (_Rect__WEBPACK_IMPORTED_MODULE_0___default())(worldPos.x, worldPos.y, worldSize.x, worldSize.y);\r\n    }\r\n\r\n    // same but no offset\r\n    WorldToCanvasVector(worldVector)\r\n    {\r\n        return { \r\n            x: this.WorldToCanvasScale(worldVector.x), \r\n            y: this.WorldToCanvasScale(worldVector.y)\r\n        };\r\n    }\r\n\r\n    CanvasToWorldVector(canvasVector)\r\n    {\r\n        return { \r\n            x: this.CanvasToWorldScale(canvasVector.x), \r\n            y: this.CanvasToWorldScale(canvasVector.y)\r\n        };\r\n    }\r\n\r\n    WorldToCanvasScale(worldScale)\r\n    {\r\n        return worldScale * this.zoom;\r\n    }\r\n\r\n    CanvasToWorldScale(canvasScale)\r\n    {\r\n        return canvasScale / this.zoom;\r\n    }\r\n    \r\n    update(dt)\r\n    {\r\n        let d = Math.sqrt(window.innerWidth * window.innerHeight);\r\n        this.zoom = Math.floor(0.5 * d);\r\n\r\n        const screenCenter = \r\n        { \r\n            x: 0.5 * window.innerWidth, \r\n            y: 0.5 * window.innerHeight \r\n        };\r\n        \r\n        const worldScreenCenter = this.CanvasToWorldVector(screenCenter);\r\n        \r\n        let camTarget;\r\n\r\n        if (this.game.mainPlayer)\r\n        {\r\n            camTarget = \r\n            {\r\n                x: this.game.mainPlayer.x - worldScreenCenter.x,\r\n                y: this.game.mainPlayer.y - worldScreenCenter.y,\r\n            }\r\n        }\r\n        else if (this.game.map)\r\n        {\r\n            camTarget = \r\n            {\r\n                x: this.game.map.width * 0.5 - worldScreenCenter.x,\r\n                y: this.game.map.height * 0.5 - worldScreenCenter.y,\r\n            }\r\n        }\r\n\r\n        if (camTarget)\r\n        {\r\n            let k = 1.5 * dt;\r\n            this.x = (0,_GameMath__WEBPACK_IMPORTED_MODULE_1__.lerp)(this.x, camTarget.x, k);\r\n            this.y = (0,_GameMath__WEBPACK_IMPORTED_MODULE_1__.lerp)(this.y, camTarget.y, k);\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://soundwaves/./src/clientside/ClientCamera.js?");

/***/ }),

/***/ "./src/clientside/ClientEntity.js":
/*!****************************************!*\
  !*** ./src/clientside/ClientEntity.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ClientEntity\": () => /* binding */ ClientEntity\n/* harmony export */ });\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Vector */ \"./src/Vector.js\");\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Vector__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Rect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Rect */ \"./src/Rect.js\");\n/* harmony import */ var _Rect__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Rect__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Color */ \"./src/Color.js\");\n/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_Color__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _GameMath__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../GameMath */ \"./src/GameMath.js\");\n/* harmony import */ var _GameMath__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_GameMath__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _Glow__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Glow */ \"./src/Glow.js\");\n/* harmony import */ var _Glow__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_Glow__WEBPACK_IMPORTED_MODULE_4__);\n\r\n\r\n\r\n\r\n\r\n\r\nclass ClientEntity extends (_Rect__WEBPACK_IMPORTED_MODULE_1___default())\r\n{\r\n    constructor(game, { x, y, w, h, co, br })\r\n    {\r\n\t\tsuper(x, y, w, h);\r\n\t\tthis.game = game;\r\n\t\tthis.oldX = this.x; this.oldY = this.y;\r\n\t\tthis.color = new (_Color__WEBPACK_IMPORTED_MODULE_2___default())(co.r, co.g, co.b, co.a);\r\n        this.glow = new (_Glow__WEBPACK_IMPORTED_MODULE_4___default())();\r\n\t\tthis.glow.brightness = br;\r\n\r\n        // for interpolating non-mainplayers\r\n\t\tthis.lastServerPos = new _Vector__WEBPACK_IMPORTED_MODULE_0__.Vec2(x, y);\r\n\t\tthis.newServerPos = new _Vector__WEBPACK_IMPORTED_MODULE_0__.Vec2(x, y);\r\n\t\tthis.serverTimeStep = null;\r\n\t\tthis.timeSinceLastData = 0;\r\n    }\r\n\r\n    setData(serverObj, deltaTimeServer)\r\n\t{\r\n\t\t// show server pos\r\n\t\t// window.debuggerRects.push(new Rect(serverObj.x, serverObj.y, 0.04, 0.04));\r\n\t\t\r\n\t\tif (serverObj.hasOwnProperty('x') && serverObj.hasOwnProperty('y'))\r\n\t\t{\r\n\t\t\tthis.lastServerPos = this.newServerPos;\r\n\t\t\tthis.newServerPos = new _Vector__WEBPACK_IMPORTED_MODULE_0__.Vec2(serverObj.x, serverObj.y);\r\n\r\n\t\t\tif (this.serverTimeStep)\r\n\t\t\t{\r\n\t\t\t\t// rolling average of timestep\r\n\t\t\t\tthis.serverTimeStep = (0,_GameMath__WEBPACK_IMPORTED_MODULE_3__.lerp)(this.serverTimeStep, deltaTimeServer, 0.2);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthis.serverTimeStep = deltaTimeServer;\r\n\t\t\t}\r\n\r\n\t\t\tthis.timeSinceLastData = 0;\r\n\t\t}\r\n\r\n\t\tif (serverObj.hasOwnProperty('br'))\r\n\t\t\tthis.glow.brightness = serverObj.br;\r\n\t}\r\n\r\n\tgetBounds()\r\n\t{\r\n\t\treturn new (_Rect__WEBPACK_IMPORTED_MODULE_1___default())(this.x, this.y, this.w, this.h);\r\n\t}\r\n    \r\n\tupdate(dt, map)\r\n\t{\r\n\t\t// quick and easy way to make update run only \r\n\t\t// after two server data sends, so that \r\n\t\t// the interpolation code works right away\r\n\t\tif (this.serverTimeStep)\r\n\t\t{\r\n\t\t\tthis.timeSinceLastData += dt;\r\n\r\n\t\t\t// interpolate between last and new pos\r\n\t\t\tconst t = this.timeSinceLastData / this.serverTimeStep;\r\n\t\t\t// LINEAR INTERPOLATION (change to quadratic in future for smoother results)\r\n\t\t\tconst interpolatedPosition = this.lastServerPos.lerp(this.newServerPos, t);\r\n\t\t\tthis.x = interpolatedPosition.x;\r\n\t\t\tthis.y = interpolatedPosition.y;\r\n\r\n\t\t\t///////////////////////////////////// COLLISION WALLS /////////////////////////////////////\r\n\t\t\t// optimise collision search by only checking in a specified range\r\n\t\t\tconst rangeRect = this.extend(this.game.settings.colDetectionRange);\r\n\t\t\t// check collision\r\n\t\t\tmap.foreachWall((wall) =>\r\n\t\t\t{\r\n\t\t\t\t_Rect__WEBPACK_IMPORTED_MODULE_1___default().collide(wall, this);\r\n\t\t\t}, rangeRect);\r\n\t\t\tthis.oldX = this.x;\r\n\t\t\tthis.oldY = this.y;\r\n\r\n\t\t\tthis.glow.update(dt);\r\n\r\n\t\t\tif (isNaN(this.x) || isNaN(this.y))\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('Entities pos NaN');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tdraw(ctx, camera)\r\n\t{\r\n        this.color.a = Math.floor(255 * this.glow.brightness);\r\n\t\tctx.fillStyle = this.color.toHex();\r\n\r\n\t\t// rect\r\n\t\tconst canRect = camera.WorldToCanvasRect(this);\r\n\t\tctx.fillRect(canRect.x, canRect.y, canRect.w, canRect.h);\r\n\t}\r\n}\r\n\n\n//# sourceURL=webpack://soundwaves/./src/clientside/ClientEntity.js?");

/***/ }),

/***/ "./src/clientside/ClientGame.js":
/*!**************************************!*\
  !*** ./src/clientside/ClientGame.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ClientGame\": () => /* binding */ ClientGame\n/* harmony export */ });\n/* harmony import */ var _Rect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Rect */ \"./src/Rect.js\");\n/* harmony import */ var _Rect__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Rect__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ClientGamemap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ClientGamemap */ \"./src/clientside/ClientGamemap.js\");\n/* harmony import */ var _ClientSoundwave__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ClientSoundwave */ \"./src/clientside/ClientSoundwave.js\");\n/* harmony import */ var _ClientPlayers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ClientPlayers */ \"./src/clientside/ClientPlayers.js\");\n/* harmony import */ var _ClientEntity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ClientEntity */ \"./src/clientside/ClientEntity.js\");\n/* harmony import */ var _ClientBug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ClientBug */ \"./src/clientside/ClientBug.js\");\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Vector */ \"./src/Vector.js\");\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_Vector__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _GameSettings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../GameSettings */ \"./src/GameSettings.js\");\n/* harmony import */ var _GameSettings__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_GameSettings__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _ClientCamera__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ClientCamera */ \"./src/clientside/ClientCamera.js\");\n/* harmony import */ var _Input__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Input */ \"./src/clientside/Input.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass ClientGame\r\n{\r\n    constructor()\r\n    {\r\n        this.camera = new _ClientCamera__WEBPACK_IMPORTED_MODULE_8__.ClientCamera(this, 0, 0, 100);\r\n        this.input = new _Input__WEBPACK_IMPORTED_MODULE_9__.Input(this);\r\n\r\n        this.map;\r\n        this.settings;\r\n        this.gameObjects = new Map();\r\n        this.mainPlayer;\r\n    }\r\n\r\n    *gameObjectsOfType(T)\r\n    {\r\n        for (const [id, go] of this.gameObjects)\r\n        {\r\n            if (go instanceof T)\r\n            {\r\n                yield [id, go];\r\n            }\r\n        }\r\n    }\r\n\r\n    update(dt)\r\n    {\r\n        // UPDATE ALL GOs\r\n        for (const [ id, go ] of this.gameObjects)\r\n        {\r\n            go.update(dt, this.map);\r\n\r\n            if (go.dead) // mainly used for soundwaves\r\n            {\r\n                this.gameObjects.delete(id);\r\n            }\r\n        }\r\n        \r\n        ////////////////// SOUNDWAVE & BUG /////////////////\r\n        for (const [wID, wave] of this.gameObjectsOfType(_ClientSoundwave__WEBPACK_IMPORTED_MODULE_2__.ClientSoundwave)) // get all waves\r\n        {\r\n            const wBounds = wave.getBounds();\r\n            for (const [ id, entity ] of this.gameObjectsOfType(_ClientBug__WEBPACK_IMPORTED_MODULE_5__.ClientBug))\r\n            {\r\n                if (_Rect__WEBPACK_IMPORTED_MODULE_0___default().intersectRect(wBounds, entity))\r\n                {\r\n                    let hit = false;\r\n                    for (const vertex of wave.vertices)\r\n                    {\r\n                        if (vertex.active)\r\n                        {\r\n                            let A = new _Vector__WEBPACK_IMPORTED_MODULE_6__.Vec2(vertex.oldX, vertex.oldY);\r\n                            let B = new _Vector__WEBPACK_IMPORTED_MODULE_6__.Vec2(vertex.x, vertex.y);\r\n                            if (_Rect__WEBPACK_IMPORTED_MODULE_0___default().intersectLine(entity.getBounds(), A, B))\r\n                            {\r\n                                hit = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n    \r\n                    if (hit)\r\n                    {\r\n                        entity.hurt(wave.settings.damage * wave.power, wave.sender);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.camera.update(dt);\r\n    }\r\n\r\n    setData(serverData)\r\n    {\r\n        ////////////////////// Map ///////////////////////\r\n        if (serverData.map)\r\n        {\r\n            this.map = new _ClientGamemap__WEBPACK_IMPORTED_MODULE_1__.ClientGamemap(this, serverData.map);\r\n        }\r\n\r\n        /////////////////// Settings ///////////////////////\r\n        if (serverData.settings)\r\n        {\r\n            this.settings = _GameSettings__WEBPACK_IMPORTED_MODULE_7__.GameSettings.FromArray(serverData.settings);\r\n        }\r\n\r\n        /////////////////// Gameobjects ///////////////////////\r\n        if (serverData.go)\r\n        {\r\n            for (const [id, data] of serverData.go)\r\n            {\r\n                if (data[0] == 'del')\r\n                {\r\n                    this.gameObjects.delete(id);\r\n                }\r\n                else if (data[0] == 'upd')\r\n                {\r\n                    const clientObj = this.gameObjects.get(id);\r\n                    clientObj.setData(data[1], serverData.dt);\r\n                }\r\n                else if (data[0] == 'new')\r\n                {\r\n                    // data: ['new', vars, type]\r\n\r\n                    let T;\r\n                    switch (data[2])\r\n                    {\r\n                        case 'w':\r\n                            T = _ClientSoundwave__WEBPACK_IMPORTED_MODULE_2__.ClientSoundwave; break;\r\n                        case 'b':\r\n                            T = _ClientBug__WEBPACK_IMPORTED_MODULE_5__.ClientBug; break;\r\n                        case 'p':\r\n                        {\r\n                            if (id == window.socket.id)\r\n                                T = _ClientPlayers__WEBPACK_IMPORTED_MODULE_3__.ClientMainPlayer; // main player\r\n                            else\r\n                                T = _ClientPlayers__WEBPACK_IMPORTED_MODULE_3__.ClientPlayer;\r\n                            break;\r\n                        }\r\n                        default:\r\n                        {\r\n                            console.log(\"Unknown type: '\" + data[2] + \"'\");\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    const newObj = new T(this, data[1]);\r\n                    this.gameObjects.set(id, newObj);\r\n                }\r\n            }\r\n        }\r\n\r\n        // mainplayer - if set to undefined, menu shows up\r\n        this.mainPlayer = this.gameObjects.get(socket.id);\r\n    }\r\n\r\n    draw(ctx, w, h)\r\n    {\r\n        ////////////////////////////////// CLEAR //////////////////////////////////\r\n        ctx.fillStyle = \"#000000\";\r\n        ctx.fillRect(0, 0, w, h);\r\n\r\n        ////////////////////////////////// DRAW GRID //////////////////////////////////\r\n        let range = this.camera.CanvasToWorldRect(new (_Rect__WEBPACK_IMPORTED_MODULE_0___default())(0, 0, w, h));\r\n        range = range.roundUp();\r\n        ctx.strokeStyle = \"#050505\";\r\n        ctx.lineWidth = 3;\r\n        ctx.beginPath();\r\n        for (let j = range.getTop(); j < range.getBottom(); j += 0.10)\r\n        {\r\n            let y = this.camera.WorldToCanvas({x:0, y:j}).y; // only y\r\n            ctx.moveTo(0, y);\r\n            ctx.lineTo(w, y);\r\n        }\r\n        for (let i = range.getLeft(); i < range.getRight(); i += 0.10)\r\n        {\r\n            let x = this.camera.WorldToCanvas({x:i, y:0}).x; // only y\r\n            ctx.moveTo(x, 0);\r\n            ctx.lineTo(x, h);\r\n        }\r\n        ctx.stroke();\r\n\r\n        ////////////////////////////////// DRAW WAVES //////////////////////////////////\r\n        for (const [id, go] of this.gameObjectsOfType(_ClientSoundwave__WEBPACK_IMPORTED_MODULE_2__.ClientSoundwave))\r\n        {\r\n            go.draw(ctx, this.camera);\r\n        }\r\n\r\n        ////////////////////////////////// DRAW MAP //////////////////////////////////\r\n        if (this.map)\r\n        {\r\n            this.map.draw(ctx, this.camera, range);\r\n        }\r\n\r\n        ////////////////////////////////// DRAW ENTITIES //////////////////////////////////\r\n        for (const [id, go] of this.gameObjectsOfType(_ClientEntity__WEBPACK_IMPORTED_MODULE_4__.ClientEntity))\r\n        {\r\n            if (id != socket.id) // not mainplayer\r\n            {\r\n                go.draw(ctx, this.camera);\r\n            }\r\n        }\r\n\r\n        ////////////////////////////////// DRAW MAINPLAYER //////////////////////////////////\r\n        if (this.mainPlayer)\r\n        {\r\n            this.mainPlayer.draw(ctx, this.camera);\r\n        }\r\n\r\n        ////////////////////////////////// DRAW DEBUG //////////////////////////////////\r\n        for (const r of window.debuggerRects)\r\n        {\r\n            ctx.lineWidth = 1;\r\n            ctx.strokeStyle = \"#ff0000\";\r\n            let camRect = this.camera.WorldToCanvasRect(r);\r\n            ctx.strokeRect(camRect.x, camRect.y, camRect.w, camRect.h);\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://soundwaves/./src/clientside/ClientGame.js?");

/***/ }),

/***/ "./src/clientside/ClientGamemap.js":
/*!*****************************************!*\
  !*** ./src/clientside/ClientGamemap.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ClientGamemap\": () => /* binding */ ClientGamemap\n/* harmony export */ });\n/* harmony import */ var _Rect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Rect */ \"./src/Rect.js\");\n/* harmony import */ var _Rect__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Rect__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\r\nclass ClientGamemap\r\n{\r\n    constructor(game, { w: width, h: height, data })\r\n    {\r\n        this.game = game;\r\n        \r\n        this.width = width;\r\n        this.height = height;\r\n        this.pixels = [];\r\n        for (let j = 0; j < this.height; j++)\r\n        {\r\n            this.pixels[j] = [];\r\n            for (let i = 0; i < this.width; i++)\r\n            {\r\n                this.pixels[j][i] = data[ j * this.width + i ];\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    foreachWall(action, rangeRect = null)\r\n    {\r\n        let X = 0, Y = 0, R = this.width, B = this.height;\r\n        if (rangeRect)\r\n        {\r\n            X = Math.max(X, Math.floor(rangeRect.x));\r\n            Y = Math.max(Y, Math.floor(rangeRect.y));\r\n            R = Math.min(R, Math.ceil(rangeRect.getRight()));\r\n            B = Math.min(B, Math.ceil(rangeRect.getBottom()));\r\n        }\r\n        \r\n        for (let j = Y; j < B; j++)\r\n        {\r\n            for (let i = X; i < R; i++)\r\n            {\r\n                if (this.pixels[j][i] == '1')\r\n                {\r\n                    const rect = new (_Rect__WEBPACK_IMPORTED_MODULE_0___default())(i, j, 1, 1);\r\n                    action(rect);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    draw(ctx, camera, range)\r\n    {\r\n        ctx.fillStyle = \"#000000\";\r\n        this.foreachWall((rect) =>\r\n        {\r\n            const canRect = camera.WorldToCanvasRect(rect);\r\n            ctx.fillRect(canRect.x, canRect.y, canRect.w, canRect.h);   \r\n        }, range);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://soundwaves/./src/clientside/ClientGamemap.js?");

/***/ }),

/***/ "./src/clientside/ClientPlayers.js":
/*!*****************************************!*\
  !*** ./src/clientside/ClientPlayers.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ClientPlayer\": () => /* binding */ ClientPlayer,\n/* harmony export */   \"ClientMainPlayer\": () => /* binding */ ClientMainPlayer\n/* harmony export */ });\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Vector */ \"./src/Vector.js\");\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Vector__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Rect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Rect */ \"./src/Rect.js\");\n/* harmony import */ var _Rect__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Rect__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ClientEntity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ClientEntity */ \"./src/clientside/ClientEntity.js\");\n/* harmony import */ var _SoundwaveSettings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../SoundwaveSettings */ \"./src/SoundwaveSettings.js\");\n/* harmony import */ var _SoundwaveSettings__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_SoundwaveSettings__WEBPACK_IMPORTED_MODULE_3__);\n\r\n\r\n\r\n\r\n\r\nclass ClientPlayer extends _ClientEntity__WEBPACK_IMPORTED_MODULE_2__.ClientEntity\r\n{\r\n\tconstructor(game, { x, y, w, h, na, co, br })\r\n\t{\r\n\t\tsuper(game, { x, y, w, h, co, br });\r\n\t\tthis.name = na;\r\n        this.velocity = new _Vector__WEBPACK_IMPORTED_MODULE_0__.Vec2();\r\n\t}\r\n\r\n\tdraw(ctx, camera)\r\n\t{\r\n\t\tsuper.draw(ctx, camera);\r\n\r\n\t\t// DRAW NAME\r\n        this.color.a = Math.floor(255 * this.glow.brightness);\r\n\t\tctx.fillStyle = this.color.toHex();\r\n\t\tctx.font = \"bold 14px Trebuchet MS\";\r\n\t\tctx.textAlign = 'center';\r\n\t\tlet textPos = camera.WorldToCanvas({ x: this.getCenterX(), y: this.getBottom() });\r\n\t\tctx.fillText(this.name, textPos.x, textPos.y + 18);\r\n\t}\r\n}\r\n\r\nclass ClientMainPlayer extends ClientPlayer\r\n{\r\n\tconstructor(game, { x, y, w, h, na, co, br, he })\r\n    {\r\n        super(game, { x, y, w, h, na, co, br })\r\n        this.health = he;\r\n\t\tthis.charge = 0;\r\n\t\tthis.xp = 0;\r\n\r\n        // AIMING ASSIST\r\n        this.isCharging = false;\r\n        this.angle = 0;\r\n        this.game.input.addEventListener('chargestart', () =>\r\n        {\r\n            this.isCharging = true;\r\n        });\r\n        this.game.input.addEventListener('chargemove', (e) =>\r\n        {\r\n            this.angle = e.angle;\r\n        });\r\n        this.game.input.addEventListener('chargestop', (e) =>\r\n        {\r\n            this.isCharging = false;\r\n        });\r\n    }\r\n    \r\n\tsetData(serverObj, deltaTimeServer)\r\n\t{\r\n\t\tsuper.setData(serverObj, deltaTimeServer);\r\n\t\t\r\n        if (serverObj.hasOwnProperty('ch'))\r\n            this.charge = serverObj.ch;\r\n        if (serverObj.hasOwnProperty('he'))\r\n            this.health = serverObj.he;\r\n        if (serverObj.hasOwnProperty('xp'))\r\n            this.xp = serverObj.xp;\r\n\t}\r\n\r\n    /**\r\n     * ClientMainPlayer.update() completely overrides the normal ClientPlayer.update(),\r\n     * since basically everything is different. The user input controlls this\r\n     * player and not the servers data. Therefore, the normal interpolation of \r\n     * server data must not be made.\r\n     */\r\n\tupdate(dt, map)\r\n\t{\r\n\t\t/////////////////////////////////// MOVEMENT /////////////////////////////////////\r\n        // walking\r\n        let speed = this.game.settings.playerSpeed;\r\n        let targetVel = new _Vector__WEBPACK_IMPORTED_MODULE_0__.Vec2(this.game.input.axisX, this.game.input.axisY);\r\n        targetVel = targetVel.mult(speed);\r\n        // apply\r\n        let k = Math.min(1, dt * this.game.settings.walkSmoothness); // make lerp time relative\r\n        this.velocity = this.velocity.lerp(targetVel, k)\r\n        // correction using last server pos\r\n        let correction = this.newServerPos.sub(this);\r\n        let q = this.game.settings.clientCorrection * dt;\r\n        /**\r\n         * FOR FUTURE:\r\n         * smoothly limit correction vector to a certain magnitude, so that\r\n         * the player can still move if large lagspike and doesn't get held back \r\n         */\r\n        this.velocity = this.velocity.add(correction.mult(q));\r\n\r\n        this.x += this.velocity.x * dt; // integrate\r\n        this.y += this.velocity.y * dt;\r\n\r\n        ///////////////////////////////////// COLLISION WALLS /////////////////////////////////////\r\n\t\t// optimise collision search by only checking in a specified range\r\n\t\tconst margin = this.game.settings.colDetectionRange;\r\n\t\tconst rangeRect = this.extend(margin);\r\n\t\t// check collision\r\n\t\tmap.foreachWall((wall) =>\r\n\t\t{\r\n\t\t\t_Rect__WEBPACK_IMPORTED_MODULE_1___default().collide(wall, this);\r\n\t\t}, rangeRect);\r\n\t\tthis.oldX = this.x;\r\n\t\tthis.oldY = this.y;\r\n\r\n        if (isNaN(this.x) || isNaN(this.y))\r\n        {\r\n            throw new Error('Mainplayer pos NaN');\r\n        }\r\n\t}\r\n\r\n\tdraw(ctx, camera)\r\n\t{\r\n        this.glow.brightness = 1;\r\n\r\n        // AIMINGASSIST\r\n        if (this.isCharging)\r\n        {\r\n            const playerPos = camera.WorldToCanvas({ x: this.getCenterX(), y: this.getCenterY() });\r\n            const settings = _SoundwaveSettings__WEBPACK_IMPORTED_MODULE_3___default().Attack(this.angle, this.charge);\r\n            const radius = 40;\r\n\r\n            this.color.a = Math.floor(255 * this.charge);\r\n            ctx.strokeStyle = this.color.toHex();\r\n            ctx.lineWidth = 7;\r\n\r\n            ctx.beginPath();\r\n            ctx.ellipse(playerPos.x, playerPos.y, radius, radius, \r\n                settings.rotation, -0.5 * settings.spread, 0.5 * settings.spread);\r\n            ctx.stroke();\r\n        }\r\n        \r\n\t\tsuper.draw(ctx, camera);\r\n    }\r\n}\n\n//# sourceURL=webpack://soundwaves/./src/clientside/ClientPlayers.js?");

/***/ }),

/***/ "./src/clientside/ClientSoundwave.js":
/*!*******************************************!*\
  !*** ./src/clientside/ClientSoundwave.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ClientSoundwave\": () => /* binding */ ClientSoundwave\n/* harmony export */ });\n/* harmony import */ var _Soundwave__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Soundwave */ \"./src/Soundwave.js\");\n/* harmony import */ var _Soundwave__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Soundwave__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _SoundwaveSettings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SoundwaveSettings */ \"./src/SoundwaveSettings.js\");\n/* harmony import */ var _SoundwaveSettings__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_SoundwaveSettings__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Color */ \"./src/Color.js\");\n/* harmony import */ var _Color__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_Color__WEBPACK_IMPORTED_MODULE_2__);\n\r\n\r\n\r\n\r\nclass ClientSoundwave extends (_Soundwave__WEBPACK_IMPORTED_MODULE_0___default())\r\n{\r\n    constructor(game, {co, ce, ag, se})\r\n    {\r\n        const color = new (_Color__WEBPACK_IMPORTED_MODULE_2___default())(co.r, co.g, co.b, co.a);\r\n        const settings = new (_SoundwaveSettings__WEBPACK_IMPORTED_MODULE_1___default())(...se);\r\n\r\n        super(game, ce.x, ce.y, null, settings, color, true);\r\n        this.age = ag;\r\n    }\r\n\r\n    draw(ctx, camera)\r\n    {\r\n        if (this.vertices.length > 0)\r\n        {\r\n            const center = camera.WorldToCanvas(this.center);\r\n            const radius = camera.WorldToCanvasScale(this.r);\r\n            // SOUNDWAVE\r\n            const gradient = ctx.createRadialGradient(center.x,center.y,0, center.x,center.y,radius);\r\n            gradient.addColorStop(0, \"#00000000\");\r\n            gradient.addColorStop(1, this.color.toHex());\r\n            ctx.fillStyle = gradient;\r\n\r\n            ctx.beginPath();\r\n            let p = camera.WorldToCanvas(this.vertices[0]);\r\n            ctx.moveTo(p.x, p.y);\r\n            for (let i = 0; i < this.vertices.length; i++)\r\n            {\r\n                let index = (i+1) % this.vertices.length;\r\n                p = camera.WorldToCanvas(this.vertices[index]);\r\n                ctx.lineTo(p.x, p.y);\r\n            }\r\n            ctx.fill();\r\n        \r\n            // EDGE GLOW\r\n            var gradient2 = ctx.createRadialGradient(center.x,center.y,0, center.x,center.y,radius);\r\n            gradient2.addColorStop(0, this.color.toHex());\r\n            gradient2.addColorStop(1, this.color.toHex());\r\n            ctx.strokeStyle = gradient2;\r\n            ctx.lineWidth = 15;\r\n            ctx.lineCap = 'round';\r\n\r\n            ctx.beginPath();\r\n            for (let a = 0; a < this.vertices.length; a++)\r\n            {\r\n                let b = (a + 1) % this.vertices.length;\r\n\r\n                let aWall = !this.vertices[a].active && !this.vertices[a].center;\r\n                let bWall = !this.vertices[b].active && !this.vertices[b].center;\r\n\r\n                if (aWall && bWall)\r\n                {\r\n                    let A = camera.WorldToCanvas(this.vertices[a]);\r\n                    let B = camera.WorldToCanvas(this.vertices[b]);\r\n\r\n                    ctx.moveTo(A.x, A.y);\r\n                    ctx.lineTo(B.x, B.y);\r\n                }\r\n            }\r\n            ctx.stroke();\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://soundwaves/./src/clientside/ClientSoundwave.js?");

/***/ }),

/***/ "./src/clientside/Input.js":
/*!*********************************!*\
  !*** ./src/clientside/Input.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Input\": () => /* binding */ Input\n/* harmony export */ });\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Vector */ \"./src/Vector.js\");\n/* harmony import */ var _Vector__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Vector__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\r\nclass InputEvent\r\n{\r\n    constructor()\r\n    {\r\n        this.callbacks = new Set();\r\n    }\r\n\r\n    addListener(c)\r\n    {\r\n        this.callbacks.add(c);\r\n        return c;\r\n    }\r\n\r\n    removeListener(c)\r\n    {\r\n        this.callbacks.delete(c);\r\n        return c;\r\n    }\r\n\r\n    invoke(event)\r\n    {\r\n        for (const callback of this.callbacks)\r\n        {\r\n            callback(event);\r\n        }\r\n    }\r\n}\r\n\r\nclass Input\r\n{\r\n    constructor(game)\r\n    {\r\n        this.game = game;\r\n\r\n        /////////////////////// EVENTS ///////////////////////\r\n        this.events = new Map([\r\n            [ 'chargestart', new InputEvent() ],\r\n            [ 'chargemove', new InputEvent() ],\r\n            [ 'chargestop', new InputEvent() ],\r\n        ]);\r\n        \r\n        /**\r\n         * input events, which are sent to server - only start and end needed\r\n         */\r\n        this.addEventListener('chargestart', () =>\r\n        {\r\n            this.history.push({ charge: true });\r\n        });\r\n        this.addEventListener('chargestop', ({ angle }) =>\r\n        {\r\n            this.history.push({ charge: false, angle });\r\n        });\r\n\r\n        /////////////////////// MOVEMENT ///////////////////////\r\n        this.keys = new Map(); // stores keys\r\n        \r\n        this.axisX = 0;\r\n        this.axisY = 0;\r\n\r\n        this.lastX = this.lastY = 0;\r\n\r\n        this.isCharging = false;\r\n\r\n        this.history = [];\r\n\r\n        let updateAxes = () =>\r\n        {\r\n            let u = this.getKey('ArrowUp') || this.getKey('KeyW');\r\n            let d = this.getKey('ArrowDown') || this.getKey('KeyS');\r\n            let l = this.getKey('ArrowLeft') || this.getKey('KeyA');\r\n            let r = this.getKey('ArrowRight') || this.getKey('KeyD');\r\n            let x = (r ? 1 : 0) - (l ? 1 : 0);\r\n            let y = (d ? 1 : 0) - (u ? 1 : 0);\r\n\r\n            let m = Math.hypot(x, y);\r\n            if (m > 1)\r\n            {\r\n                x /= m;\r\n                y /= m;\r\n            }\r\n\r\n            if (this.getKey('ShiftLeft'))\r\n            {\r\n                x *= this.game.settings.sneakFactor;\r\n                y *= this.game.settings.sneakFactor;\r\n            }\r\n\r\n            this.axisX = x;\r\n            this.axisY = y;\r\n        }\r\n        // attach function to a eventlistener for every key\r\n        for (const key of [ 'KeyA', 'KeyD', 'ArrowRight', 'ArrowLeft', 'KeyW', 'KeyS', 'ArrowUp', 'ArrowDown' ])\r\n        {\r\n            this.onKey(key, updateAxes, updateAxes); // call both if pressed and released\r\n        }\r\n\r\n        /////////////////////// JOYSTICK MOVEMENT ////////////////////////\r\n        const joystick = document.getElementById('joystick-handler');\r\n        const thumb = document.getElementById('joystick-thumb');\r\n\r\n        const setThumbPosition = (x, y) =>\r\n        {\r\n            const joystickRect = joystick.getBoundingClientRect();\r\n            const thumbRect = thumb.getBoundingClientRect();\r\n            const marginFactor = (joystickRect.width - thumbRect.width) / joystickRect.width;\r\n\r\n            thumb.style.left = 0.5 * (marginFactor * x + 1) * joystickRect.width - 0.5 * thumbRect.width + \"px\";\r\n            thumb.style.top = 0.5 * (marginFactor * y + 1) * joystickRect.height - 0.5 * thumbRect.height + \"px\";\r\n        }\r\n\r\n        const joystickClicked = (touch) => \r\n        {\r\n            const joystickRect = joystick.getBoundingClientRect();\r\n            const thumbRect = thumb.getBoundingClientRect();\r\n            const marginFactor = (joystickRect.width - thumbRect.width) / joystickRect.width;\r\n            \r\n            let x = (touch.clientX - joystickRect.x) / joystickRect.width;\r\n            let y = (touch.clientY - joystickRect.y) / joystickRect.height;\r\n            x = (2 * x - 1) / marginFactor;\r\n            y = (2 * y - 1) / marginFactor;\r\n\r\n            let m = Math.hypot(x, y);\r\n            if (m > 1)\r\n            {\r\n                // conserve angle when limiting length\r\n                let angle = Math.atan2(y, x);\r\n                x = Math.cos(angle);\r\n                y = Math.sin(angle);\r\n            }\r\n\r\n            this.axisX = x;\r\n            this.axisY = y;\r\n\r\n            setThumbPosition(x, y);\r\n        };\r\n\r\n        const touchOptions = \r\n        {\r\n            passive: false\r\n        };\r\n\r\n        this.leftTouchIdentifier;\r\n\r\n        joystick.addEventListener('touchstart', (e) => \r\n        {\r\n            e.preventDefault();\r\n\r\n            let touch = e.changedTouches[0];\r\n            if (touch)\r\n            {\r\n                this.leftTouchIdentifier = touch.identifier;\r\n                joystickClicked(touch);\r\n            }\r\n        }, touchOptions);\r\n\r\n        joystick.addEventListener('touchmove', (e) => \r\n        {\r\n            e.preventDefault();\r\n\r\n            // get the correct touch event\r\n            let touch;\r\n            for (let t of e.changedTouches)\r\n            {\r\n                if (t.identifier == this.leftTouchIdentifier)\r\n                {\r\n                    touch = t;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (touch)\r\n            {\r\n                joystickClicked(touch);\r\n            }\r\n        }, touchOptions);\r\n\r\n        joystick.addEventListener('touchend', (e) => \r\n        {\r\n            e.preventDefault();\r\n\r\n            setThumbPosition(0, 0);\r\n            this.axisX = this.axisY = 0;\r\n        }, touchOptions);\r\n\r\n        joystick.addEventListener('touchcancel', (e) => \r\n        {\r\n            e.preventDefault();\r\n            \r\n            setThumbPosition(0, 0);\r\n            this.axisX = this.axisY = 0;\r\n        }, touchOptions);\r\n\r\n        /////////////////////// SHIFT ///////////////////////\r\n        this.onKey('ShiftLeft', updateAxes, updateAxes); // also when pressed and released\r\n    \r\n        /////////////////////// MOUSE ///////////////////////\r\n        const calcAngle = (x, y) => // calcs angle of vector from player to cursor or finger\r\n        {\r\n            let mousePos = this.game.camera.CanvasToWorld({ x, y });\r\n            let playerCenter = new _Vector__WEBPACK_IMPORTED_MODULE_0__.Vec2(game.mainPlayer.getCenterX(), game.mainPlayer.getCenterY());\r\n            let deltaPos = playerCenter.sub(mousePos).mult(-1); // flip dir bc. sub function can only be called on vector\r\n            return Number(deltaPos.heading().toFixed(3));\r\n        };\r\n\r\n        document.addEventListener('mousedown', (e) =>\r\n        {\r\n            if (e.path[0].id == 'joystick-handler')\r\n            {\r\n                // when joystick is hit, charge should not be activated\r\n                return;\r\n            };\r\n\r\n            if (game.mainPlayer)\r\n            {\r\n                this.isCharging = true;\r\n                this.events.get('chargestart').invoke();\r\n            }\r\n        });\r\n\r\n        document.addEventListener('mousemove', (e) =>\r\n        {\r\n            if (e.path[0].id == 'joystick-handler')\r\n            {\r\n                // when joystick is hit, charge should not be deactivated\r\n                return;\r\n            };\r\n\r\n            if (game.mainPlayer && this.isCharging) // PROBABLY changes nothing\r\n            {\r\n                let angle = calcAngle(e.offsetX, e.offsetY);\r\n\r\n                this.events.get('chargemove').invoke({ angle });\r\n            }\r\n        });\r\n\r\n        document.addEventListener('mouseup', (e) =>\r\n        {\r\n            if (e.path[0].id == 'joystick-handler')\r\n            {\r\n                // when joystick is hit, charge should not be deactivated\r\n                return;\r\n            };\r\n\r\n            if (game.mainPlayer) // PROBABLY no effect\r\n            {\r\n                let angle = calcAngle(e.offsetX, e.offsetY);\r\n\r\n                this.isCharging = false;\r\n\r\n                this.events.get('chargestop').invoke({ angle });\r\n            }\r\n        });\r\n\r\n        /////////////////////// TOUCH AIMING ///////////////////////\r\n        const aimArea = document.getElementById('aiming-handler');\r\n        this.touchAimStartX = 0;\r\n        this.touchAimStartY = 0;\r\n        this.rightTouchIdentifier;\r\n\r\n        aimArea.addEventListener('touchstart', (e) =>\r\n        {\r\n            e.preventDefault();\r\n\r\n            let touch = e.changedTouches[0];\r\n            if (touch)\r\n            {\r\n                this.rightTouchIdentifier = touch.identifier;\r\n\r\n                this.touchAimStartX = touch.clientX;\r\n                this.touchAimStartY = touch.clientY;\r\n\r\n                this.events.get('chargestart').invoke();\r\n            }\r\n        }, touchOptions);\r\n\r\n        aimArea.addEventListener('touchmove', (e) =>\r\n        {\r\n            e.preventDefault();\r\n\r\n            // get the correct touch event\r\n            let touch;\r\n            for (let t of e.changedTouches)\r\n            {\r\n                if (t.identifier == this.rightTouchIdentifier)\r\n                {\r\n                    touch = t;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (touch)\r\n            {\r\n                let dx = touch.clientX - this.touchAimStartX;\r\n                let dy = touch.clientY - this.touchAimStartY;\r\n                let angle = Math.atan2(dy, dx);\r\n\r\n                this.events.get('chargemove').invoke({ angle });\r\n            }\r\n        }, touchOptions);\r\n\r\n        aimArea.addEventListener('touchend', (e) =>\r\n        {\r\n            // get the correct touch event\r\n            let touch;\r\n            for (let t of e.changedTouches)\r\n            {\r\n                if (t.identifier == this.rightTouchIdentifier)\r\n                {\r\n                    touch = t;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (touch)\r\n            {\r\n                let dx = touch.clientX - this.touchAimStartX;\r\n                let dy = touch.clientY - this.touchAimStartY;\r\n                let angle = Math.atan2(dy, dx);\r\n\r\n                this.events.get('chargestop').invoke({ angle });\r\n            }\r\n        }, touchOptions);\r\n    }\r\n\r\n    addEventListener(eventName, callback)\r\n    {\r\n        let event = this.events.get(eventName)\r\n        if (event)\r\n        {\r\n            return event.addListener(callback);\r\n        }\r\n    }\r\n\r\n    removeEventListener(eventName, callback)\r\n    {\r\n        let event = this.events.get(eventName);\r\n        if (event)\r\n        {\r\n            return event.removeListener(callback);\r\n        }\r\n    }\r\n    \r\n    getKey(key)\r\n    {\r\n        return this.keys.get(key) || false;\r\n    }\r\n\r\n    // ADD EVENTS TO KEY\r\n    onKey(key , down = () => {}, up = () => {})\r\n    {\r\n        document.addEventListener(\"keydown\", (event) =>\r\n        {\r\n            if (event.code == key)\r\n            {\r\n                this.keys.set(key, true);\r\n                down(this);\r\n            }\r\n        });\r\n\r\n        document.addEventListener(\"keyup\", (event) =>\r\n        {\r\n            if (event.code == key)\r\n            {\r\n                this.keys.set(key, false);\r\n                up(this);\r\n            }\r\n        });\r\n    }\r\n\r\n    getChanges()\r\n    {\r\n        if (this.lastX != this.axisX)\r\n        {\r\n            let x = Number(this.axisX.toFixed(3)); // reduce size\r\n            this.history.push({ x });\r\n        }\r\n        if (this.lastY != this.axisY)\r\n        {\r\n            let y = Number(this.axisY.toFixed(3));\r\n            this.history.push({ y });\r\n        }\r\n\r\n        this.lastX = this.axisX;\r\n        this.lastY = this.axisY;\r\n\r\n        return [ this.history, this.history = [] ][0]; // swap 'n' clear\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://soundwaves/./src/clientside/Input.js?");

/***/ }),

/***/ "./src/clientside/client.js":
/*!**********************************!*\
  !*** ./src/clientside/client.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ClientGame__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ClientGame */ \"./src/clientside/ClientGame.js\");\n/* harmony import */ var _Bars__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Bars */ \"./src/clientside/Bars.js\");\n\r\n\r\n\r\nwindow.socket = io.connect(location.host, { roomId: location.pathname });\r\n\r\n//https://stackoverflow.com/questions/6666907/how-to-detect-a-mobile-device-with-javascript\r\nlet isMobile = false;\r\nif (/Mobile|Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent)) \r\n{\r\n    // console.log(\"Platform: mobile\");\r\n    isMobile = true;\r\n}\r\nelse\r\n{\r\n    // console.log(\"Platform: PC\");\r\n}\r\n\r\nconst ctx = document.getElementById('canvas').getContext('2d');\r\nlet w, h;\r\nlet lastTime = new Date().getTime();\r\n\r\nconst game = new _ClientGame__WEBPACK_IMPORTED_MODULE_0__.ClientGame();\r\n// disable rightclick\r\ndocument.addEventListener('contextmenu', event => event.preventDefault());\r\n\r\nlet isMenuVisible = true;\r\n\r\nwindow.debuggerRects = [];\r\n\r\nlet healthBar = new _Bars__WEBPACK_IMPORTED_MODULE_1__.Statusbar('health-bar');\r\nlet chargeBar = new _Bars__WEBPACK_IMPORTED_MODULE_1__.Statusbar('charge-bar');\r\nlet xpBar = new _Bars__WEBPACK_IMPORTED_MODULE_1__.XPBar('xp-bar');\r\n\r\n/////////// FULLSCREEN /////////// \r\ndocument.getElementById('fullscreen-button').addEventListener('click', () =>\r\n{\r\n    let fullScreenMode = document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen; // This will return true or false depending on if it's full screen or not.\r\n\r\n    if (fullScreenMode)\r\n    {\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        } else if (document.webkitExitFullscreen) { /* Safari */\r\n            document.webkitExitFullscreen();\r\n        } else if (document.msExitFullscreen) { /* IE11 */\r\n            document.msExitFullscreen();\r\n        }\r\n    }\r\n    else\r\n    {\r\n        const docElement = document.documentElement;\r\n\r\n        if (docElement.requestFullscreen) {\r\n            docElement.requestFullscreen();\r\n        } else if (docElement.webkitRequestFullscreen) { /* Safari */\r\n            docElement.webkitRequestFullscreen();\r\n        } else if (docElement.msRequestFullscreen) { /* IE11 */\r\n            docElement.msRequestFullscreen();\r\n        }\r\n    }\r\n});\r\n\r\nconst evaluatePercentileHeight = (element, percentage) =>\r\n{\r\n    const rect = element.parentElement.getBoundingClientRect();\r\n    return rect.height * percentage;\r\n}\r\n\r\n////////////////// ALL SQUARE CONTAINERS :( ///////////////////////\r\nconst updateSquares = () =>\r\n{\r\n    const makeSquare = (element) =>\r\n    {\r\n        const styles = window.getComputedStyle(element, null)\r\n        let width = styles.getPropertyValue('width');\r\n        if (/%/.test(width))\r\n            width = evaluatePercentileHeight(element, parseFloat(width) * 0.01);\r\n        else\r\n            width = parseFloat(width);\r\n        let maxHeight = styles.getPropertyValue('max-height');\r\n        if (/%/.test(maxHeight))\r\n            maxHeight = evaluatePercentileHeight(element, parseFloat(maxHeight) * 0.01);\r\n        else\r\n            maxHeight = parseFloat(maxHeight);\r\n\r\n        if (isNaN(width))\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (!isNaN(maxHeight) && maxHeight < width)\r\n        {\r\n            element.style.width = maxHeight + \"px\";\r\n            element.style.height = maxHeight + \"px\";\r\n        }\r\n        else\r\n        {\r\n            element.style.height = width + \"px\";\r\n        }\r\n    }\r\n\r\n    const squares = document.getElementsByClassName('square');\r\n    \r\n    for (let square of squares)\r\n    {\r\n        makeSquare(square);\r\n    }\r\n};\r\nupdateSquares();\r\n\r\nwindow.addEventListener('resize', () =>\r\n{\r\n    updateSquares();\r\n});\r\n\r\ndocument.getElementById('join-window').classList.remove('hidden');\r\ndocument.getElementById('mobile-input').classList.remove('hidden');\r\ndocument.getElementById('mobile-input').classList.add('disabled');\r\n\r\n// set data\r\nsocket.on('server-data', (dataJSON) => \r\n{\r\n    window.debuggerRects = [];\r\n    const serverData = JSON.parse(dataJSON, (key, value) =>\r\n    {\r\n        if (key == 'go')\r\n        {\r\n            if (value instanceof Array)\r\n            {\r\n                return new Map(value);\r\n            }\r\n        }\r\n            \r\n        return value;\r\n    });\r\n\r\n    // feed client game with server data\r\n    game.setData(serverData);\r\n\r\n    const clientData = {}\r\n\r\n    if (game.mainPlayer)\r\n    {\r\n        // INPUT\r\n        let changes = game.input.getChanges();\r\n        if (Object.keys(changes).length > 0) // reduce data sent if no new input\r\n        {\r\n            clientData.input = changes;\r\n        }\r\n\r\n        // UI\r\n        healthBar.set(game.mainPlayer.health);\r\n        chargeBar.set(game.mainPlayer.charge);\r\n        xpBar.set(game.mainPlayer.xp);\r\n\r\n        changeMenuVisibility(false);\r\n    }\r\n    else\r\n    {\r\n        game.input.getChanges(); // clears the history\r\n\r\n        changeMenuVisibility(true);\r\n    }\r\n\r\n    if (Object.keys(clientData).length > 0) // only emit if data even exists\r\n    {\r\n        socket.emit('client-data', clientData);\r\n    }\r\n});\r\n\r\nsocket.on('room-not-found', () => alert(\"room not found\"));\r\n\r\nsocket.on('room-closed', () => alert(\"room closed\"));\r\n\r\nsocket.on('scoreboard', (topPlayers) =>\r\n{\r\n    const scoreboard = document.getElementById('scoreboard');\r\n\r\n    // delete last entries\r\n    while (scoreboard.lastChild) \r\n    {\r\n        scoreboard.removeChild(scoreboard.lastChild);\r\n    }\r\n\r\n    for (let i = 0; i < topPlayers.length; i++)\r\n    {\r\n        const [ name, score ] = topPlayers[i];\r\n        const msg = (i + 1) + \". \" + name + \"  -  Level \" + Math.floor(score);\r\n        const para = document.createElement('p');\r\n        para.innerHTML = msg;\r\n\r\n        if (game.mainPlayer)\r\n        {\r\n            if (game.mainPlayer.name == name)\r\n            {\r\n                para.style.color = \"#ffffff\";\r\n            }\r\n        }\r\n\r\n        scoreboard.appendChild(para);\r\n    }\r\n});\r\n\r\nfunction loop()\r\n{\r\n    let time = new Date().getTime();\r\n    let dt = (time - lastTime) * 0.001;\r\n    lastTime = time;\r\n\r\n    // update\r\n    game.update(dt);\r\n    \r\n    //drawing\r\n    game.draw(ctx, w, h);\r\n    healthBar.update(dt);\r\n    chargeBar.update(dt);\r\n    xpBar.update(dt);\r\n\r\n    window.requestAnimationFrame(loop);\r\n}\r\nwindow.requestAnimationFrame(loop);\r\n\r\n// if you press enter in input field instead of the button\r\ndocument.getElementById(\"nameInput\").addEventListener('keypress', (e) => {\r\n    if (e.keyCode == 13) \r\n        joinGame();\r\n});\r\n\r\nfunction joinGame()\r\n{\r\n    let nameInput = document.getElementById(\"nameInput\");\r\n    let name = nameInput.value.trim();\r\n    let colorInput = document.getElementById('colorInput');\r\n    let color = colorInput.value;\r\n\r\n    socket.emit('request-join', name, color);\r\n}\r\n\r\nsocket.on('answer-join', ([ acceptJoin, reasoning = \"Please enter a name!\" ]) => \r\n{\r\n    let error = document.getElementById('nameError');\r\n    if (acceptJoin)\r\n    {\r\n        error.classList.add(\"disabled\");\r\n    }\r\n    else\r\n    {\r\n        error.innerHTML = reasoning;\r\n        error.classList.remove(\"disabled\");\r\n    }\r\n});\r\n\r\nwindow.joinGame = joinGame;\r\n\r\nfunction changeMenuVisibility(turnMenuOn)\r\n{\r\n    if (turnMenuOn == isMenuVisible)\r\n    {\r\n        return; // no need to be update if already in right state\r\n    }\r\n\r\n    let joinCard = document.getElementById('join-window');\r\n    let uiCurtain = document.getElementById('ui-curtain');\r\n    let touchInput = document.getElementById('mobile-input');\r\n\r\n    if (turnMenuOn)\r\n    {\r\n        // display join card\r\n        joinCard.classList.remove('disabled');\r\n        setTimeout(() => \r\n        {\r\n            joinCard.classList.remove('opacity-zero');\r\n        }, 20);\r\n\r\n        // add dark curtain\r\n        uiCurtain.classList.add('darkened');\r\n        \r\n        // disable touchInput\r\n        touchInput.classList.add('disabled');\r\n        \r\n        isMenuVisible = true;\r\n    }\r\n    else\r\n    {\r\n        // remove join card\r\n        joinCard.classList.add('opacity-zero');\r\n        setTimeout(() =>\r\n        {\r\n            joinCard.classList.add('disabled');\r\n        }, 400) // time must be same as in '.opacity-zero'\r\n        \r\n        // remove dark curtain\r\n        uiCurtain.classList.remove('darkened');\r\n        \r\n        if (isMobile)\r\n        {\r\n            // display touchinput\r\n            touchInput.classList.remove('disabled');\r\n        }\r\n        \r\n        isMenuVisible = false;\r\n    }\r\n}\r\n\r\n// Window size\r\nfunction resize()\r\n{\r\n    const can = document.getElementById('canvas');\r\n    w = can.width = window.innerWidth;\r\n    h = can.height = window.innerHeight;\r\n}\r\nresize();\r\nwindow.addEventListener('resize', resize);\r\n\r\n// let s = \r\n//     '  __ _          _                                        _'+\"\\n\" +\r\n//     ' / _| | ___  __| | ___ _ __ _ __ ___   __ _ _   _ ___   (_) ___'+\"\\n\" +\r\n//     '| |_| |/ _ \\\\/ _` |/ _ | \\'__| \\'_ ` _ \\\\ / _` | | | / __|  | |/ _ \\\\'+\"\\n\" +\r\n//     '|  _| |  __| (_| |  __| |  | | | | | | (_| | |_| \\\\__  _ | | (_) |'+\"\\n\" +\r\n//     '|_| |_|\\\\___|\\\\__,_|\\\\___|_|  |_| |_| |_|\\\\__,_|\\\\__,_|___(_)|_|\\\\___/';\r\n\r\n// let s = '\\n' + \r\n// ' ______   __         ______     _____     ______     ______     __    __     ______     __  __     ______     __     ______     ' + '\\n' + \r\n// '/\\\\  ___\\\\ /\\\\ \\\\       /\\\\  ___\\\\   /\\\\  __-.  /\\\\  ___\\\\   /\\\\  == \\\\   /\\\\ \"-./  \\\\   /\\\\  __ \\\\   /\\\\ \\\\/\\\\ \\\\   /\\\\  ___\\\\   /\\\\ \\\\   /\\\\  __ \\\\   ' + '\\n' + \r\n// '\\\\ \\\\  __\\\\ \\\\ \\\\ \\\\____  \\\\ \\\\  __\\\\   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\ \\\\  __\\\\   \\\\ \\\\  __<   \\\\ \\\\ \\\\-./\\\\ \\\\  \\\\ \\\\  __ \\\\  \\\\ \\\\ \\\\_\\\\ \\\\  \\\\ \\\\___  \\\\  \\\\ \\\\ \\\\  \\\\ \\\\ \\\\/\\\\ \\\\  ' + '\\n' + \r\n// ' \\\\ \\\\_\\\\    \\\\ \\\\_____\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\____-  \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\/\\\\_____\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_____\\\\ ' + '\\n' + \r\n// '  \\\\/_/     \\\\/_____/   \\\\/_____/   \\\\/____/   \\\\/_____/   \\\\/_/ /_/   \\\\/_/  \\\\/_/   \\\\/_/\\\\/_/   \\\\/_____/   \\\\/_____/   \\\\/_/   \\\\/_____/ ' + '\\n';\r\n                                                                                                                               \r\n// let s = \r\n//     '███████████████████████████████████\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███████████████░░▒░░███████░░▒░░███\\n' +\r\n//     '███████████████░░░░░███████░░░░░███\\n' +\r\n//     '███████████████░░▒░░███████░░▒░░███\\n' +\r\n//     '███████████████░░░░░███████░░░░░███\\n' +\r\n//     '███████████████░░▒░░███████░░▒░░███\\n' +\r\n//     '███████████████░░░░░███████░░░░░███\\n' +\r\n//     '███████████████████████████████████\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░███████████████████████████\\n' +\r\n//     '███░░░░░███████████████████████████\\n' +\r\n//     '███░░▒░░███████████████████████████\\n' +\r\n//     '███░░░░░███████████████████████████\\n' +\r\n//     '███░░▒░░███████████████████████████\\n' +\r\n//     '███░░░░░███████████████████████████\\n' +\r\n//     '███████████████████████████████████\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░███████░░▒░░███████░░▒░░███\\n' +\r\n//     '███░░░░░███████░░░░░███████░░░░░███\\n' +\r\n//     '███░░▒░░███████░░▒░░███████░░▒░░███\\n' +\r\n//     '███░░░░░███████░░░░░███████░░░░░███\\n' +\r\n//     '███░░▒░░███████░░▒░░███████░░▒░░███\\n' +\r\n//     '███░░░░░███████░░░░░███████░░░░░███\\n' +\r\n//     '███████████████████████████████████\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░███████████████████░░▒░░███\\n' +\r\n//     '███░░░░░███████████████████░░░░░███\\n' +\r\n//     '███░░▒░░███████████████████░░▒░░███\\n' +\r\n//     '███░░░░░░░░█████████████░░░░░░░░███\\n' +\r\n//     '██████░░▒░░█████████████░░▒░░██████\\n' +\r\n//     '██████░░░░░░░░░░░░░░░░░░░░░░░██████\\n' +\r\n//     '██████░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░██████\\n' +\r\n//     '██████░░░░░░░░░░░░░░░░░░░░░░░██████\\n' +\r\n//     '███████████████████████████████████\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░███████░░▒░░███████░░▒░░███\\n' +\r\n//     '███░░░░░███████░░░░░███████░░░░░███\\n' +\r\n//     '███░░▒░░███████░░▒░░███████░░▒░░███\\n' +\r\n//     '███░░░░░███████░░░░░███████░░░░░███\\n' +\r\n//     '███░░▒░░███████░░▒░░███████░░▒░░███\\n' +\r\n//     '███░░░░░███████░░░░░███████░░░░░███\\n' +\r\n//     '███████████████████████████████████\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███████████████░░▒░░███████░░▒░░███\\n' +\r\n//     '████████████░░░░░░░░███████░░░░░███\\n' +\r\n//     '████████████░░▒░░▒░░███████░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░▒░░████░░▒░░▒░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░████░░░░░░░░░░░░░░███\\n' +\r\n//     '███████████████████████████████████\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███████████████████████████░░▒░░███\\n' +\r\n//     '████████████████████████░░░░░░░░███\\n' +\r\n//     '████████████████████████░░▒░░██████\\n' +\r\n//     '███████████████░░░░░░░░░░░░░░██████\\n' +\r\n//     '███████████████░░▒░░▒░░▒░░█████████\\n' +\r\n//     '███████████████░░░░░░░░░░░░░░██████\\n' +\r\n//     '████████████████████████░░▒░░██████\\n' +\r\n//     '████████████████████████░░░░░░░░███\\n' +\r\n//     '███████████████████████████░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███████████████████████████████████\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███████████████░░▒░░███████░░▒░░███\\n' +\r\n//     '███████████████░░░░░███████░░░░░███\\n' +\r\n//     '███████████████░░▒░░███████░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███████████████████████████████████\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░███████████████████████████\\n' +\r\n//     '███░░░░░███████████████████████████\\n' +\r\n//     '███░░▒░░███████████████████████████\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███████████████████████████████████\\n' +\r\n//     '███░░░░░░░░████░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░████░░▒░░▒░░▒░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░████░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░███████░░▒░░███████░░▒░░███\\n' +\r\n//     '███░░░░░███████░░░░░███████░░░░░███\\n' +\r\n//     '███░░▒░░███████░░▒░░███████░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░████░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░▒░░▒░░▒░░████░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░████░░░░░░░░███\\n' +\r\n//     '███████████████████████████████████\\n' +\r\n//     '███░░░░░███████████████████████████\\n' +\r\n//     '███░░▒░░███████████████████████████\\n' +\r\n//     '███░░░░░███████████████████████████\\n' +\r\n//     '███████████████████████████████████\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███████████████████████████████████\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░███████████████████░░▒░░███\\n' +\r\n//     '███░░░░░███████████████████░░░░░███\\n' +\r\n//     '███░░▒░░███████████████████░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░▒░░███\\n' +\r\n//     '███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███\\n' +\r\n//     '███████████████████████████████████\\n';\r\n\r\n\r\nlet s = \r\n' _       _   _    _   _                     __     ___   _  \\n' + \r\n'|_  |   |_  | \\\\  |_  |_)  |\\\\/|   /\\\\   | |  (_       |   / \\\\ \\n' + \r\n'|   |_  |_  |_/  |_  | \\\\  |  |  /--\\\\  |_|  __)  o  _|_  \\\\_/ \\n';\r\n\r\nconsole.log(s);\n\n//# sourceURL=webpack://soundwaves/./src/clientside/client.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => module['default'] :
/******/ 				() => module;
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/clientside/client.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;